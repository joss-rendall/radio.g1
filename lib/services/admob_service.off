/*
 *  admob_service.dart
 *
 *  Created by Ilia Chirkunov <contact@cheebeez.com> on January 25, 2022.
 */

import 'dart:async';
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:google_mobile_ads/google_mobile_ads.dart';
import 'package:radio_g1/config.dart';

class AdmobService {
  static const isEnabled = true;

  // Initializing the Google Mobile Ads SDK.
  static Future<void> init() async {
    await MobileAds.instance.initialize();
  }

  // Provides a unique banner widget.
  static AdWidget banner(int width, int height) {
    return AdWidget(
      key: UniqueKey(),
      ad: BannerAd(
          adUnitId: _adUnit,
          size: AdSize(width: width, height: height),
          request: const AdRequest(nonPersonalizedAds: true),
          listener: _bannerAdListener)
        ..load(),
    );
  }

  // Fetches the correct ad unit based on the platform.
  static String get _adUnit =>
      Platform.isAndroid ? Config.admobAndroidAdUnit : Config.admobIosAdUnit;

  // Banner listener with callbacks for different ad events.
  static BannerAdListener get _bannerAdListener => BannerAdListener(
        onAdLoaded: (_) {
          debugPrint('Ad loaded.');
        },
        onAdFailedToLoad: (Ad ad, LoadAdError error) {
          debugPrint('Ad failed to load: ${error.message}');
          ad.dispose();
        },
      );
}

class ConsentDialog extends StatelessWidget {
  const ConsentDialog({
    super.key,
    required this.loading,
    required this.builder,
  });

  final Widget loading;
  final Function builder;

  @override
  Widget build(BuildContext context) {
    return FutureBuilder(
      future: _requestConsent(debug: false),
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.done) {
          return builder();
        }

        return loading;
      },
    );
  }

  // Configure debug settings.
  ConsentDebugSettings? _debugSettings(bool debug) {
    if (!debug) return null;
    ConsentInformation.instance.reset();

    final settings = ConsentDebugSettings(
      debugGeography: DebugGeography.debugGeographyEea,
      testIdentifiers: [
        'F751F6B9BA3FEF9E74E063C2550F6243',
        'F97EFC60-B255-4AB3-8D45-C6DEB1500213',
      ],
    );

    return settings;
  }

  // Request user consent for advertisement display.
  Future<void> _requestConsent({bool debug = false}) async {
    final completer = Completer();
    final settings = _debugSettings(debug);

    // Requesting update of user consent information.
    final params = ConsentRequestParameters(consentDebugSettings: settings);
    ConsentInformation.instance.requestConsentInfoUpdate(params, () async {
      if (await ConsentInformation.instance.isConsentFormAvailable()) {
        // Consent form available.
        debugPrint('isConsentFormAvailable');
        await _loadConsentForm();
      } else {
        // Consent form not available.
        debugPrint('isConsentFormNotAvailable');
        await AdmobService.init();
      }

      completer.complete();
    }, (error) {
      debugPrint(error.toString());
      completer.complete();
    });

    return completer.future;
  }

  // Load the consent form.
  Future<void> _loadConsentForm() async {
    final completer = Completer();

    ConsentForm.loadConsentForm((consentForm) async {
      // Getting current consent status.
      final status = await ConsentInformation.instance.getConsentStatus();
      debugPrint(status.toString());

      // Displaying the consent form if it is required.
      if (status == ConsentStatus.required) {
        consentForm.show((error) async {
          completer.complete(_loadConsentForm());
        });
      } else {
        // Initializing ads if consent is not required.
        await AdmobService.init();
        completer.complete();
      }
    }, (error) {
      completer.complete();
    });

    return completer.future;
  }
}
